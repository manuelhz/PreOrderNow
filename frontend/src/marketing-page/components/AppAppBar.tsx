import * as React from 'react';
import { styled, alpha } from '@mui/material/styles';
import Box from '@mui/material/Box';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Container from '@mui/material/Container';
import Divider from '@mui/material/Divider';
import MenuItem from '@mui/material/MenuItem';
import Drawer from '@mui/material/Drawer';
import MenuIcon from '@mui/icons-material/Menu';
import CloseRoundedIcon from '@mui/icons-material/CloseRounded';
import ColorModeIconDropdown from '../../shared-theme/ColorModeIconDropdown';
import Sitemark from './SitemarkIcon';

// Import the custom hook to access marketing content
import { useMarketingContent } from '../MarketingPage';
import { Link } from 'react-router-dom';

const StyledToolbar = styled(Toolbar)(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  flexShrink: 0,
  borderRadius: `calc(${theme.shape.borderRadius}px + 8px)`,
  backdropFilter: 'blur(24px)',
  border: '1px solid',
  borderColor: (theme.vars || theme).palette.divider,
  backgroundColor: theme.vars
    ? `rgba(${theme.vars.palette.background.defaultChannel} / 0.4)`
    : alpha(theme.palette.background.default, 0.4),
  boxShadow: (theme.vars || theme).shadows[1],
  padding: '8px 12px',
}));

export default function AppAppBar() {
  const [open, setOpen] = React.useState(false);

  const toggleDrawer = (newOpen: boolean) => () => {
    setOpen(newOpen);
  };

  // Consume the marketing content using the custom hook
  const { appBar } = useMarketingContent();

  // Determine if the button link should open in a new tab
  const isExternalLink = appBar.earlyAccessButton.target === '_blank';
  const buttonLinkProps = isExternalLink
    ? {
        href: appBar.earlyAccessButton.path,
        target: '_blank',
        rel: 'noopener noreferrer', // Recommended for security when using target="_blank"
      }
    : {
        component:  Link, // Use react-router-dom's Link component
        to: appBar.earlyAccessButton.path, // Path for internal routing
      }

  return (
    <AppBar
      position="fixed"
      enableColorOnDark
      sx={{
        boxShadow: 0,
        bgcolor: 'transparent',
        backgroundImage: 'none',
        mt: 'calc(var(--template-frame-height, 0px) + 28px)',
      }}
    >
      <Container maxWidth="lg">
        <StyledToolbar variant="dense" disableGutters>
          <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', px: 0 }}>
            <Sitemark />
            <Box sx={{ display: { xs: 'none', md: 'flex' } }}>
              {/* Dynamically render navigation links */}
              {
                // map iterates over each elemnt of the array mainNavigationItems and call the callback function
                // map collects all the buttons generated by the callback in a new array and
                // react renders this array of buttons.
                appBar.mainNavigationItems.map(
                  (link) => (
                    <Button
                      key={link.id}  // Using label as key, consider a unique ID if available
                      variant="text"
                      color="info"
                      size="small"
                      href={link.path} // Use path from content
                    >
                    {link.label} {/** Use label from content */}
                    </Button>
                  )
                )
              }
            </Box>
          </Box>
          <Box
            sx={{
              display: { xs: 'none', md: 'flex' },
              gap: 1,
              alignItems: 'center',
            }}
          >
            <Button color="primary" variant="text" size="small" {...buttonLinkProps}>
              {appBar.earlyAccessButton.label}
            </Button>
            <Button color="primary" variant="contained" size="small" {...buttonLinkProps}>
              {appBar.earlyAccessButton.label}
            </Button>
            <ColorModeIconDropdown />
          </Box>
          <Box sx={{ display: { xs: 'flex', md: 'none' }, gap: 1 }}>
            <ColorModeIconDropdown size="medium" />
            <IconButton aria-label="Menu button" onClick={toggleDrawer(true)}>
              <MenuIcon />
            </IconButton>
            <Drawer
              anchor="top"
              open={open}
              onClose={toggleDrawer(false)}
              PaperProps={{
                sx: {
                  top: 'var(--template-frame-height, 0px)',
                },
              }}
            >
              <Box sx={{ p: 2, backgroundColor: 'background.default' }}>
                <Box
                  sx={{
                    display: 'flex',
                    justifyContent: 'flex-end',
                  }}
                >
                  <IconButton onClick={toggleDrawer(false)}>
                    <CloseRoundedIcon />
                  </IconButton>
                </Box>

                {/* Dynamically render navigation links*/}
                {appBar.mainNavigationItems.map((link) => (
                  <MenuItem key={link.id} component="a" href={link.path}>{link.label}</MenuItem>
                ))}

                <Divider sx={{ my: 3 }} />
                <MenuItem>
                  <Button color="primary" variant="contained" fullWidth {...buttonLinkProps}>
                    {appBar.earlyAccessButton.label}
                  </Button>
                </MenuItem>
                <MenuItem>
                  <Button color="primary" variant="outlined" fullWidth {...buttonLinkProps}>
                    {appBar.earlyAccessButton.label}
                  </Button>
                </MenuItem>
              </Box>
            </Drawer>
          </Box>
        </StyledToolbar>
      </Container>
    </AppBar>
  );
}
